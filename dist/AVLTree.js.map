{"version":3,"file":"AVLTree.js","sources":["../src/util.js","../src/TreeNode.js","../src/BinarySearchTree.js","../src/AVLTree.js"],"sourcesContent":["/**\r\n * @Description:\r\n * @Author:  wuenyou\r\n * @Date: 2020/11/18\r\n * @LastEditors:\r\n * @LastEditTime: 2020/11/18\r\n */\r\nexport const defaultEquals = function (a, b) {\r\n\treturn a === b\r\n}\r\nconst COMPARE = {\r\n\tEQUAL: 0,\r\n\tLESS_THAN: -1,\r\n\tBIGGER_THAN: 1\r\n}\r\nexport function defaultCompare(a, b) {\r\n\tif (a === b) {\r\n\t\treturn COMPARE.EQUAL;\r\n\t} else if (a < b) {\r\n\t\treturn COMPARE.LESS_THAN;\r\n\t} else {\r\n\t\treturn COMPARE.BIGGER_THAN;\r\n\t}\r\n}\r\nexport function\tkeyToString(str) {\r\n\tif (str === null) {\r\n\t\treturn 'null';\r\n\t} else if (str === undefined) {\r\n\t\treturn 'undefined';\r\n\t} else if(typeof str === 'function') {\r\n\t\treturn str.toString();\r\n\t}\r\n\treturn JSON.stringify(str)\r\n}\r\n","/**\r\n * @Description:\r\n * @Author:  wuenyou\r\n * @Date: 2020/12/2\r\n * @LastEditors:\r\n * @LastEditTime: 2020/12/2\r\n */\r\nexport class TreeNode {\r\n\tconstructor(key) {\r\n\t\tthis.key = key;\r\n\t\tthis.left = null;\r\n\t\tthis.right = null;\r\n\t}\r\n}\r\n","/**\r\n * @Description:\r\n * @Author:  wuenyou\r\n * @Date: 2020/12/2\r\n * @LastEditors:\r\n * @LastEditTime: 2020/12/2\r\n */\r\nimport {defaultCompare} from \"./util\";\r\nimport {TreeNode} from \"./TreeNode\";\r\n\r\nconst COMPARE = {\r\n\tEQUAL: 0,\r\n\tLESS_THAN: -1,\r\n\tBIGGER_THAN: 1\r\n}\r\nexport default class BinarySearchTree {\r\n\tconstructor(compareFn = defaultCompare) {\r\n\t\tthis.compareFn = compareFn;\r\n\t\tthis.root = null;\r\n\t}\r\n\tinsert(key) {\r\n\t\tif (!this.root) {\r\n\t\t\tthis.root = new TreeNode(key);\r\n\t\t} else {\r\n\t\t\tthis.insertNode(this.root, key);\r\n\t\t}\r\n\t}\r\n\tinsertNode(node, key) {\r\n\t\tif (this.compareFn(key, node.key) === COMPARE.LESS_THAN) {\r\n\t\t\tconst leftNode = node.left;\r\n\t\t\tif (!leftNode) {\r\n\t\t\t\tnode.left = new TreeNode(key);\r\n\t\t\t} else {\r\n\t\t\t\tthis.insertNode(leftNode, key);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tconst rightNode = node.right;\r\n\t\t\tif (!rightNode) {\r\n\t\t\t\tnode.right = new TreeNode(key);\r\n\t\t\t} else {\r\n\t\t\t\tthis.insertNode(rightNode, key);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// 中序\r\n\tinOrderTraverse(callback) {\r\n\t\tthis.inOrderTraverseNode(this.root, callback);\r\n\t}\r\n\tinOrderTraverseNode(node, callback) {\r\n\t\tif(node) {\r\n\t\t\tthis.inOrderTraverseNode(node.left, callback);\r\n\t\t\tcallback(node.key);\r\n\t\t\tthis.inOrderTraverseNode(node.right, callback);\r\n\t\t}\r\n\t}\r\n\t// 先序\r\n\tprevOrderTraverse(callback){\r\n\t\tthis.prevOrderTraverseNode(this.root, callback);\r\n\t}\r\n\tprevOrderTraverseNode(node, callback){\r\n\t\tif (node) {\r\n\t\t\tcallback(node.key);\r\n\t\t\tthis.prevOrderTraverseNode(node.left, callback);\r\n\t\t\tthis.prevOrderTraverseNode(node.right, callback);\r\n\t\t}\r\n\t}\r\n\t// 后序\r\n\tpostOrderTraverse(callback){\r\n\t\tthis.postOrderTraverseNode(this.root, callback);\r\n\t}\r\n\tpostOrderTraverseNode(node, callback){\r\n\t\tif (node) {\r\n\t\t\tthis.postOrderTraverseNode(node.left, callback);\r\n\t\t\tthis.postOrderTraverseNode(node.right, callback);\r\n\t\t\tcallback(node.key);\r\n\t\t}\r\n\t}\r\n\t// 最小值\r\n\tmin(){\r\n\t\treturn this.minNode(this.root);\r\n\t}\r\n\tminNode(node) {\r\n\t\twhile (node && node.left) {\r\n\t\t\tnode = node.left;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\t// 最大值\r\n\tmax(){\r\n\t\treturn this.maxNode(this.root);\r\n\t}\r\n\tmaxNode(node) {\r\n\t\twhile (node && node.right) {\r\n\t\t\tnode = node.right;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\tsearch(key) {\r\n\t\treturn this.searchNode(this.root, key);\r\n\t}\r\n\tsearchNode(node, key) {\r\n\t\tif(node){\r\n\t\t\tif (this.compareFn(key, node.key) === COMPARE.LESS_THAN) {\r\n\t\t\t\treturn this.searchNode(node.left, key);\r\n\t\t\t} else if(this.compareFn(key, node.key) === COMPARE.BIGGER_THAN){\r\n\t\t\t\treturn this.searchNode(node.right, key);\r\n\t\t\t} else {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tremove(key){\r\n\t\tthis.root = this.removeNode(this.root, key);\r\n\t}\r\n\tremoveNode(node, key){\r\n\t\tif (!node) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tif (this.compareFn(key, node.key) === COMPARE.LESS_THAN) {\r\n\t\t\tnode.left = this.removeNode(node.left, key);\r\n\t\t\treturn node;\r\n\t\t} else if (this.compareFn(key, node.key) === COMPARE.BIGGER_THAN) {\r\n\t\t\tnode.right = this.removeNode(node.right, key);\r\n\t\t\treturn node;\r\n\t\t} else {\r\n\t\t\tif (!node.left && !node.right) {\r\n\t\t\t\tnode = null;\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t\tif(!node.left) {\r\n\t\t\t\tnode = node.right;\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t\tif(!node.right) {\r\n\t\t\t\tnode = node.left;\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t\tlet minNode = this.minNode(node.right);\r\n\t\t\tnode.key = minNode.key;\r\n\t\t\tnode.right = this.removeNode(node.right, minNode.key);\r\n\t\t\treturn node;\r\n\t\t}\r\n\r\n\t}\r\n}\r\n","/**\r\n * @Description:\r\n * @Author:  wuenyou\r\n * @Date: 2020/12/8\r\n * @LastEditors:\r\n * @LastEditTime: 2020/12/8\r\n */\r\nimport BinarySearchTre from './BinarySearchTree'\r\nimport {defaultCompare} from \"./util\";\r\nimport {TreeNode} from \"./TreeNode\";\r\nconst COMPARE = {\r\n\tEQUAL: 0,\r\n\tLESS_THAN: -1,\r\n\tBIGGER_THAN: 1\r\n}\r\nconst BALANCEFACTOR = {\r\n\tUNBALANCED_RIGHT: 1,\r\n\tSLIGHTLY_UNBALANCED_RIGHT: 2,\r\n\tBALANCED: 3,\r\n\tSLIGHTLY_UNBALANCED_LEFT: 4,\r\n\tUNBALANCED_LEFT: 5\r\n};\r\nexport default class AVLTree extends BinarySearchTre{\r\n\tconstructor(compareFn = defaultCompare ) {\r\n\t\tsuper(compareFn);\r\n\t\tthis.compareFn = compareFn;\r\n\t\tthis.root = null;\r\n\t}\r\n\tgetNodeHeight(node) {\r\n\t\tif (!node) {\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t\treturn Math.max(this.getNodeHeight(node.left), this.getNodeHeight(node.right)) + 1;\r\n\t}\r\n\tgetBalanceFactor(node) {\r\n\t\tconst heightDifference = this.getNodeHeight(node.left) - this.getNodeHeight(node.right);\r\n\t\tswitch (heightDifference) {\r\n\t\t\tcase -2:\r\n\t\t\t\treturn BALANCEFACTOR.UNBALANCED_RIGHT;\r\n\t\t\tcase -1:\r\n\t\t\t\treturn BALANCEFACTOR.SLIGHTLY_UNBALANCED_RIGHT;\r\n\t\t\tcase 1:\r\n\t\t\t\treturn BALANCEFACTOR.SLIGHTLY_UNBALANCED_LEFT;\r\n\t\t\tcase 2:\r\n\t\t\t\treturn BALANCEFACTOR.UNBALANCED_LEFT;\r\n\t\t\tdefault:\r\n\t\t\t\treturn BALANCEFACTOR.BALANCED;\r\n\t\t}\r\n\t}\r\n\trotationLL(node) {\r\n\t\tconst tempNode = node.left;\r\n\t\tnode.left = tempNode.right;\r\n\t\ttempNode.right = node;\r\n\t\treturn tempNode;\r\n\t}\r\n\trotationRR(node) {\r\n\t\tconst tempNode = node.right;\r\n\t\tnode.right = tempNode.left;\r\n\t\ttempNode.left = node;\r\n\t\treturn tempNode;\r\n\t}\r\n\trotationLR(node) {\r\n\t\tnode.left = this.rotationRR(node.left); // 先将失去平衡节点的左子树进行右旋转；\r\n\t\treturn this.rotationLL(node); // 再对整个失去平衡的树进行左旋转\r\n\t}\r\n\trotationRL(node) {\r\n\t\tnode.right = this.rotationLL(node.right); // 先将失去平衡节点的右子树进行左旋转\r\n\t\treturn this.rotationRR(node);  // 再对整个失去平衡的树进行右旋转\r\n\t}\r\n\tinsertNode(node, key) {\r\n\t\tif (!node) { // 说明已经到了叶节点没有下一个节点了，这个时候可以创建一个新节点作为上一个节点的子节点\r\n\t\t\treturn new TreeNode(key);\r\n\t\t} else if (this.compareFn(key, node.key) === COMPARE.LESS_THAN) { // 如果插入的数比节点的左节点要小\r\n\t\t\tnode.left = this.insertNode(node.left, key);// 递归查找左节点\r\n\t\t} else if (this.compareFn(key, node.key) === COMPARE.BIGGER_THAN) { // 如果插入的数比右节点要大\r\n\t\t\tnode.right = this.insertNode(node.right, key); // 递归查找右节点\r\n\t\t} else {\r\n\t\t\treturn node; // 相等说明插入了相同的数不做操作\r\n\t\t}\r\n\t\tconst balanceFactor = this.getBalanceFactor(node); // 获取该节点的平衡因子\r\n\t\tif (balanceFactor === BALANCEFACTOR.UNBALANCED_LEFT) { // 说明是左子树失去平衡\r\n\t\t\tif(this.compareFn(key, node.left.key) === COMPARE.LESS_THAN) { // 如果新插入的数比失去平衡的左子树数要小，则是LL型旋转\r\n\t\t\t\tnode = this.rotationLL(node);\r\n\t\t\t} else { // 否则说明新增元素是插入失去平衡节点的左子树的右侧插入，则是LR旋转\r\n\t\t\t\treturn this.rotationLR(node);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (balanceFactor === BALANCEFACTOR.UNBALANCED_RIGHT) { // 说明是右子树失去平衡\r\n\t\t\tif (this.compareFn(key, node.right.key) === COMPARE.BIGGER_THAN) { // 如果新插入的数比失去平衡的右子树数要大，则是RR型旋转\r\n\t\t\t\tnode = this.rotationRR(node);\r\n\t\t\t} else { // 否则说明新增元素是插入失去平衡节点的右子树的左侧插入，则是RL旋转\r\n\t\t\t\treturn this.rotationRL(node);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\tremoveNode(node, key) {\r\n\t\tnode = super.removeNode(node, key);\r\n\t\tif (!node) {\r\n\t\t\treturn node; // 不需要调整平衡；\r\n\t\t}\r\n\t}\r\n}\r\n"],"names":["COMPARE","EQUAL","LESS_THAN","BIGGER_THAN","defaultCompare","a","b","TreeNode","constructor","key","left","right","BinarySearchTree","compareFn","root","insert","insertNode","node","leftNode","rightNode","inOrderTraverse","callback","inOrderTraverseNode","prevOrderTraverse","prevOrderTraverseNode","postOrderTraverse","postOrderTraverseNode","min","minNode","max","maxNode","search","searchNode","remove","removeNode","BALANCEFACTOR","UNBALANCED_RIGHT","SLIGHTLY_UNBALANCED_RIGHT","BALANCED","SLIGHTLY_UNBALANCED_LEFT","UNBALANCED_LEFT","AVLTree","BinarySearchTre","getNodeHeight","Math","getBalanceFactor","heightDifference","rotationLL","tempNode","rotationRR","rotationLR","rotationRL","balanceFactor"],"mappings":"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"}